version: '3.8'

services:

  warehouse-db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${WAREHOUSE_DB_USER}
      POSTGRES_PASSWORD: ${WAREHOUSE_DB_PASSWORD}
      POSTGRES_DB: ${WAREHOUSE_DB_NAME}
    ports: ["5433:5432"]
    volumes: [warehouse_pgdata:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${WAREHOUSE_DB_USER} -d ${WAREHOUSE_DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks: [microservices-network]

  checkout-db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${CHECKOUT_DB_USER}
      POSTGRES_PASSWORD: ${CHECKOUT_DB_PASSWORD}
      POSTGRES_DB: ${CHECKOUT_DB_NAME}
    ports: ["5434:5432"]
    volumes: [checkout_pgdata:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CHECKOUT_DB_USER} -d ${CHECKOUT_DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks: [microservices-network]

  user-db:  
    image: postgres:15
    environment:
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
      POSTGRES_DB: ${USER_DB_NAME}
    ports: ["5435:5432"]
    volumes: [user_pgdata:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}"]
    networks: [microservices-network]

  # --- Cache ---
  redis:
    image: redis:7.0-alpine
    command: redis-server --save 60 1 --loglevel warning
    ports: ["6379:6379"]
    volumes: [redis_data:/data]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    networks: [microservices-network]

  # --- Servicios ---
  auth-service:
    build: ./auth-service
    environment:
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      REDIS_HOST: redis
    ports: ["50053:50053"]
    depends_on:
      redis: {condition: service_healthy}
    networks: [microservices-network]

  user-service:  
    build: ./user-service
    environment:
      DB_HOST: user-db
      DB_PORT: 5432
      DB_USER: ${USER_DB_USER}
      DB_PASSWORD: ${USER_DB_PASSWORD}
      DB_NAME: ${USER_DB_NAME}
      AUTH_SERVICE_URL: auth-service:50053  
    ports: ["50054:50054"]  
    depends_on:
      user-db: {condition: service_healthy}
      auth-service: {condition: service_healthy}
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50054"]
    networks: [microservices-network]

  api-gateway:
    image: nginx:alpine
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./api-gateway/certs:/etc/nginx/certs:ro  
    ports: 
      - "80:80"
      - "443:443"  
    depends_on:
      auth-service: {condition: service_healthy}
      user-service: {condition: service_healthy}  
    networks: [microservices-network]

  warehouse-service:
    build: ./warehouse-service
    environment:
      DB_HOST: warehouse-db
      DB_PORT: 5432
      DB_USER: ${WAREHOUSE_DB_USER}
      DB_PASSWORD: ${WAREHOUSE_DB_PASSWORD}
      DB_NAME: ${WAREHOUSE_DB_NAME}
      REDIS_HOST: redis
      AUTH_SERVICE_URL: auth-service:50053
      USER_SERVICE_URL: user-service:50054 
      GRPC_PORT: 50051
    ports: ["50051:50051"]
    depends_on:
      warehouse-db: {condition: service_healthy}
      auth-service: {condition: service_healthy}
      user-service: {condition: service_healthy}  
    networks: [microservices-network]

  checkout-service:
    build: ./checkout-service
    environment:
      DB_HOST: checkout-db
      DB_PORT: 5432
      DB_USER: ${CHECKOUT_DB_USER}
      DB_PASSWORD: ${CHECKOUT_DB_PASSWORD}
      DB_NAME: ${CHECKOUT_DB_NAME}
      REDIS_HOST: redis
      WAREHOUSE_SERVICE_URL: warehouse-service:50051
      AUTH_SERVICE_URL: auth-service:50053
      USER_SERVICE_URL: user-service:50054  
      GRPC_PORT: 50052
    ports: ["50052:50052"]
    depends_on:
      checkout-db: {condition: service_healthy}
      warehouse-service: {condition: service_healthy}
      auth-service: {condition: service_healthy}
      user-service: {condition: service_healthy}
    networks: [microservices-network]

volumes:
  warehouse_pgdata:
  checkout_pgdata:
  user_pgdata:  
  redis_data:

networks:
  microservices-network:
    driver: bridge