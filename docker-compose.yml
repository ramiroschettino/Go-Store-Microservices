services:
  # --- Base de Datos Principal ---
  main-db:
    image: postgres:15
    environment:
      POSTGRES_USER: microservice_user
      POSTGRES_PASSWORD: SafePassword123!  
      POSTGRES_DB: microservices_db
    ports: ["5432:5432"]
    volumes: 
      - main_pgdata:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U microservice_user -d microservices_db"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks: [microservices-network]

  # --- Cache ---
  redis:
    image: redis:8.0-M04-alpine
    container_name: redis_container
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    environment:
      - ALLOW_EMPTY_PASSWORD=no
      - REDIS_PASSWORD=MiSuperClaveSegura123  
    networks:
      - microservices-network  

  # --- Servicios ---
  auth-service:
    build: ./auth-service
    environment:
      DB_DSN: "postgres://microservice_user:SafePassword123!@main-db:5432/microservices_db?sslmode=disable&search_path=auth"
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      REDIS_HOST: redis
      GRPC_PORT: 50053
    ports: ["50053:50053"]
    depends_on:
      main-db: {condition: service_healthy}
      redis: {condition: service_healthy}
    networks: [microservices-network]

  user-service:
    build: ./user-service
    environment:
      DB_DSN: "postgres://microservice_user:SafePassword123!@main-db:5432/microservices_db?sslmode=disable&search_path=users"
      AUTH_SERVICE_URL: auth-service:50053
    ports: ["50054:50054"]
    depends_on:
      main-db: {condition: service_healthy}
      auth-service: {condition: service_healthy}
    networks: [microservices-network]

  warehouse-service:
    build: ./warehouse-service
    environment:
      DB_DSN: "postgres://microservice_user:SafePassword123!@main-db:5432/microservices_db?sslmode=disable&search_path=warehouse"
      REDIS_HOST: redis
      AUTH_SERVICE_URL: auth-service:50053
      USER_SERVICE_URL: user-service:50054
    ports: ["50051:50051"]
    depends_on:
      main-db: {condition: service_healthy}
      auth-service: {condition: service_healthy}
    networks: [microservices-network]

  checkout-service:
    build: ./checkout-service
    environment:
      DB_DSN: "postgres://microservice_user:SafePassword123!@main-db:5432/microservices_db?sslmode=disable&search_path=checkout"
      REDIS_HOST: redis
      WAREHOUSE_SERVICE_URL: warehouse-service:50051
      AUTH_SERVICE_URL: auth-service:50053
    ports: ["50052:50052"]
    depends_on:
      main-db: {condition: service_healthy}
      warehouse-service: {condition: service_healthy}
    networks: [microservices-network]

  api-gateway:
    image: nginx:alpine
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      auth-service: {condition: service_healthy}
    networks: [microservices-network]

volumes:
  main_pgdata:
  redis_data:

networks:
  microservices-network:
    driver: bridge
